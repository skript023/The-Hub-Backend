name: Deploy to Production

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb && 
          sudo dpkg -i cloudflared.deb

      - name: Add cloudflare SSH config
        run: |
          if [ ! -d ~/.ssh ]; then mkdir ~/.ssh; fi
          echo "${{ secrets.SSH_CONFIG }}" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Create directory
        env:
          SSH_CREDENTIAL: ${{ secrets.SSH_CREDENTIAL }}
        run: |
          sshpass -p "$SSH_CREDENTIAL" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          if [ ! -d '/usr/include/rena' ]; then 
            sudo mkdir -p /usr/include/rena 
          else 
            echo Directory '/usr/include/rena already exists.'
          fi"

      - name: Deploy from repository
        env:
          SSH_CREDENTIAL: ${{ secrets.SSH_CREDENTIAL }}
        run: |
          sshpass -p "$SSH_CREDENTIAL" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          if [ ! -d '/usr/include/rena/rena-backend' ]; then 
            cd /usr/include/rena && echo '${{ secrets.SSH_CREDENTIAL }}' | sudo -S git clone https://github.com/${{ github.repository }} rena-backend; 
          else 
            cd /usr/include/rena/rena-backend && echo '${{ secrets.SSH_CREDENTIAL }}' | sudo -S git pull origin main; 
          fi"

      - name: Create JSON file
        env:
          SSH_CREDENTIAL: ${{ secrets.SSH_CREDENTIAL }}
        run: |
          sshpass -p "$SSH_CREDENTIAL" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          if [ ! -f '/usr/include/rena/rena-backend/google.json' ]; then 
            echo '{
                "'"type"'": "'"service_account"'",
                "'"project_id"'": "'"${{ secrets.PROJECT_ID }}"'",
                "'"private_key_id"'": "'"${{ secrets.PRIVATE_KEY_ID }}"'",
                "'"private_key"'": "'"${{ secrets.PRIVATE_KEY }}"'",
                "'"client_email"'": "'"${{ secrets.CLIENT_EMAIL }}"'",
                "'"client_id"'": "'"${{ secrets.CLIENT_ID }}"'",
                "'"auth_uri"'": "'"${{ secrets.AUTH_URI }}"'",
                "'"token_uri"'": "'"${{ secrets.TOKEN_URI }}"'",
                "'"auth_provider_x509_cert_url"'": "'"${{ secrets.AUTH_PROVIDER }}"'",
                "'"client_x509_cert_url"'": "'"${{ secrets.CLIENT_CERT_URL }}"'",
                "'"universe_domain"'": "'"googleapis.com"'"
            }' > /usr/include/rena/rena-backend/google.json; 
          else 
            echo 'google.json already exists remotely. Skipping creation.'; 
          fi"

      - name: Build and start Docker containers
        env:
          SSH_CREDENTIAL: ${{ secrets.SSH_CREDENTIAL }}
        run: sshpass -p "$SSH_CREDENTIAL" ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /usr/include/rena/rena-backend && echo '${{ secrets.SSH_CREDENTIAL }}' | sudo -S docker compose up --build -d"